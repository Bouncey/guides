webpackJsonp([68880597098273],{3979:function(n,t){n.exports={data:{markdownRemark:{html:'<h2>Big Theta Notation</h2>\n<p>Big Omega tells us the lower bound of the runtime of a function, and Big O tells us the upper bound. Often times, they are different and we can’t put a guarantee on the runtime - it will vary between the two bounds and the inputs. But what happens when they’re the same? Then we can give a <strong>theta</strong> (Θ) bound - our function will run in that time, no matter what input we give it. In general, we always want to give a theta bound if possible because it is the most accurate and tightest bound. If we can’t give a theta bound, the next best thing is the tightest O bound possible. </p>\n<p>Take, for example, a function that searches an array for the value 0:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">containsZero</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#assume normal array of length n with no edge cases</span>\n  <span class="token keyword">for</span> num x <span class="token keyword">in</span> arr<span class="token punctuation">:</span>\n    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n       <span class="token keyword">return</span> true\n  <span class="token keyword">return</span> false\n</code></pre>\n      </div>\n<ol>\n<li>What’s the best case? Well, if the array we give it has 0 as the first value, it will take constant time: Ω (1)</li>\n<li>What’s the worst case? If the array doesn’t contain 0, we will have iterated through the whole array: O(n)</li>\n</ol>\n<p>We’ve given it an omega and O bound, so what about theta? We can’t give it one! Depending on the array we give it, the runtime will be somewhere in between constant and linear. </p>\n<p>Let’s change our code a bit.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">printNums</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#assume normal array of length n with no edge cases</span>\n  <span class="token keyword">for</span> num x <span class="token keyword">in</span> arr<span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Can you think of a best case and worst case??\nI can’t! No matter what array we give it, we have to iterate through every value in the array. So the function will take AT LEAST n time (Ω(n)), but we also know it won’t take any longer than n time (O(n)). What does this mean? Our function will take <strong>exactly</strong> n time: Θ(n).</p>\n<p>If the bounds are confusing, think about it like this. We have 2 numbers, x and y. We are given that x &#x3C;= y and that y &#x3C;= x. If x is less than or equal to y, and y is less than or equal to x, then x has to equal y!</p>\n<p>If you’re familiar with linked lists, test yourself and think about the runtimes for each of these functions!</p>\n<ol>\n<li>get</li>\n<li>remove</li>\n<li>add </li>\n</ol>\n<p>Things get even more interesting when you consider a doubly linked list!</p>\n<!-- The article goes here, in GitHub-flavored Markdown. Feel free to add YouTube videos, images, and CodePen/JSBin embeds  -->\n<h4>More Information:</h4>\n<!-- Please add any articles you think might be helpful to read before writing the article -->\n<p><a href="https://www.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">https://www.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>\n<a href="https://stackoverflow.com/questions/10376740/what-exactly-does-big-%D3%A8-notation-represent">https://stackoverflow.com/questions/10376740/what-exactly-does-big-%D3%A8-notation-represent</a>\n<a href="https://www.geeksforgeeks.org/analysis-of-algorithms-set-3asymptotic-notations/">https://www.geeksforgeeks.org/analysis-of-algorithms-set-3asymptotic-notations/</a></p>',fields:{slug:"/computer-science/notation/big-theta-notation/"},frontmatter:{title:"Big Theta Notation"}}},pathContext:{slug:"/computer-science/notation/big-theta-notation/"}}}});
//# sourceMappingURL=path---computer-science-notation-big-theta-notation-932cd7b5e74f22b47a06.js.map