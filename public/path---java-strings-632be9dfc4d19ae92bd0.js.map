{"version":3,"sources":["webpack:///path---java-strings-632be9dfc4d19ae92bd0.js","webpack:///./.cache/json/java-strings.json"],"names":["webpackJsonp","4491","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,s6OAAs3NC,QAAixBC,KAAA,kBAAwBC,aAAgBC,MAAA,aAAoBC,aAAgBH,KAAA","file":"path---java-strings-632be9dfc4d19ae92bd0.js","sourcesContent":["webpackJsonp([24226578491609],{\n\n/***/ 4491:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Strings</h1>\\n<p>Strings are sequences of characters. In Java, a <code>String</code> is an <code>Object</code>. Strings should not be confused with <code>char</code> as characters are literally 1 value rather than a sequence of characters. You can still use 1 value within a String, however it is preferred to use <code>char</code> when you are checking for 1 character.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>String course <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"FCC\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>course <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>true</code></pre>\\n      </div>\\n<p>You can create a String Object in the following ways:</p>\\n<ol>\\n<li><code>String str = \\\"I am a String\\\"; //as a String literal</code></li>\\n<li><code>String str = \\\"I am a \\\" + \\\"String\\\"; //as a constant expression</code></li>\\n<li><code>String str = new String(\\\"I am a String\\\"); //as a String Object using the constructor</code></li>\\n</ol>\\n<p>You might be thinking: What’s the difference between the three?</p>\\n<p>Well, using the <code>new</code> keyword gurantees that a new <code>String</code> object will be created and a new memory location will be allocated in the <code>Heap</code> memory <a href=\\\"https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/garbage_collect.html\\\">(click here to learn more)</a>. String literals and constant String expressions are cached at compile time. The compiler puts them in the String Literal Pool to prevent duplicates and improve memory consumption. Object allocation is expensive and this trick increases performance while instantiating Strings. If you use the same literal again, the JVM uses the same object. Using the contructor like above is almost always a worse choice.</p>\\n<p>In this code snippet, how many String objects are created?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>String str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nString str2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nString str3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The answer is: 2 String objects are created.<br>\\n<code>str</code> and <code>str2</code> both refer to the same object. <code>str3</code> has the same content but using <code>new</code> forced the creation of a new, distinct, object.\\nWhen you create a String literal, the JVM internally checks, what is known as the <code>String pool</code>, to see if it can find a similar (content wise) String object. If it finds it, it returns the same reference. Otherwise, it just goes ahead and creates a new String object in the pool so that the same check can be performed in the future.</p>\\n<p>You can test this using the swallow, fast Object comparison <code>==</code> and the implemented <code>equals()</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">==</span> str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints 'true'</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">==</span> str3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints 'false'</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>str3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints 'true'</span>\\n</code></pre>\\n      </div>\\n<h4>Comparing Strings</h4>\\n<p>If you want to compare the value of two String variables, you can’t use ==. This is due to the fact that this will compare the references of the variables and not the values that are linked to them. To compare the stored values of the Strings you use the method equals.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>Object obj<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>It returns true if two objects are equal and false otherwise. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>String str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello world\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nString str2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello world\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">==</span> str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints false</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints true</span>\\n</code></pre>\\n      </div>\\n<p>The first comparison is false because ”==” looks at the references and they aren’t the same.\\nThe second comparison is true because the variables store the same values. In this case “Hello world”.</p>\\n<p><strong>Notes</strong></p>\\n<ol>\\n<li>String methods use zero-based indexes, except for the second argument of substring().</li>\\n<li>The String class is final- it’s methods can’t be overridden.</li>\\n<li>When the String literal is found by JVM, it is added to string literal pool.</li>\\n<li>String class contains a method name length(),while arrays have an attribute naming length.</li>\\n<li>Strings are immutable and can not be changed.</li>\\n</ol>\",\"fields\":{\"slug\":\"/java/strings/\"},\"frontmatter\":{\"title\":\"Strings\"}}},\"pathContext\":{\"slug\":\"/java/strings/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-strings-632be9dfc4d19ae92bd0.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Strings</h1>\\n<p>Strings are sequences of characters. In Java, a <code>String</code> is an <code>Object</code>. Strings should not be confused with <code>char</code> as characters are literally 1 value rather than a sequence of characters. You can still use 1 value within a String, however it is preferred to use <code>char</code> when you are checking for 1 character.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>String course <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"FCC\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>course <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Object</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Output:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>true</code></pre>\\n      </div>\\n<p>You can create a String Object in the following ways:</p>\\n<ol>\\n<li><code>String str = \\\"I am a String\\\"; //as a String literal</code></li>\\n<li><code>String str = \\\"I am a \\\" + \\\"String\\\"; //as a constant expression</code></li>\\n<li><code>String str = new String(\\\"I am a String\\\"); //as a String Object using the constructor</code></li>\\n</ol>\\n<p>You might be thinking: What’s the difference between the three?</p>\\n<p>Well, using the <code>new</code> keyword gurantees that a new <code>String</code> object will be created and a new memory location will be allocated in the <code>Heap</code> memory <a href=\\\"https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/geninfo/diagnos/garbage_collect.html\\\">(click here to learn more)</a>. String literals and constant String expressions are cached at compile time. The compiler puts them in the String Literal Pool to prevent duplicates and improve memory consumption. Object allocation is expensive and this trick increases performance while instantiating Strings. If you use the same literal again, the JVM uses the same object. Using the contructor like above is almost always a worse choice.</p>\\n<p>In this code snippet, how many String objects are created?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>String str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nString str2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nString str3 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"This is a string\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>The answer is: 2 String objects are created.<br>\\n<code>str</code> and <code>str2</code> both refer to the same object. <code>str3</code> has the same content but using <code>new</code> forced the creation of a new, distinct, object.\\nWhen you create a String literal, the JVM internally checks, what is known as the <code>String pool</code>, to see if it can find a similar (content wise) String object. If it finds it, it returns the same reference. Otherwise, it just goes ahead and creates a new String object in the pool so that the same check can be performed in the future.</p>\\n<p>You can test this using the swallow, fast Object comparison <code>==</code> and the implemented <code>equals()</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">==</span> str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints 'true'</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">==</span> str3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints 'false'</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>str3<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints 'true'</span>\\n</code></pre>\\n      </div>\\n<h4>Comparing Strings</h4>\\n<p>If you want to compare the value of two String variables, you can’t use ==. This is due to the fact that this will compare the references of the variables and not the values that are linked to them. To compare the stored values of the Strings you use the method equals.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>Object obj<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>It returns true if two objects are equal and false otherwise. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>String str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello world\\\"</span><span class=\\\"token punctuation\\\">;</span>\\nString str2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Hello world\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str <span class=\\\"token operator\\\">==</span> str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints false</span>\\nSystem<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">equals</span><span class=\\\"token punctuation\\\">(</span>str2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// This prints true</span>\\n</code></pre>\\n      </div>\\n<p>The first comparison is false because ”==” looks at the references and they aren’t the same.\\nThe second comparison is true because the variables store the same values. In this case “Hello world”.</p>\\n<p><strong>Notes</strong></p>\\n<ol>\\n<li>String methods use zero-based indexes, except for the second argument of substring().</li>\\n<li>The String class is final- it’s methods can’t be overridden.</li>\\n<li>When the String literal is found by JVM, it is added to string literal pool.</li>\\n<li>String class contains a method name length(),while arrays have an attribute naming length.</li>\\n<li>Strings are immutable and can not be changed.</li>\\n</ol>\",\"fields\":{\"slug\":\"/java/strings/\"},\"frontmatter\":{\"title\":\"Strings\"}}},\"pathContext\":{\"slug\":\"/java/strings/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-strings.json\n// module id = 4491\n// module chunks = 24226578491609"],"sourceRoot":""}