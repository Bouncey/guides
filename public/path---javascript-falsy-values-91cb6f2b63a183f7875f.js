webpackJsonp([0x6113acd6e7e0],{4521:function(n,a){n.exports={data:{markdownRemark:{html:'<h2>Description</h2>\n<p>A falsy value is something which evaluates to FALSE, for instance when checking a variable. There are only six falsey values in JavaScript: <code>undefined</code>, <code>null</code>, <code>NaN</code>, <code>0</code>, <code>""</code> (empty string), and <code>false</code> of course.</p>\n<h2>Checking for falsy values on variables</h2>\n<p>It is possible to check for a falsy value in a variable with a simple conditional:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>variable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment" spellcheck="true">// When the variable has a falsy value the condition is true.</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>General Examples</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- falsy</span>\n\n<span class="token keyword">var</span> filledString <span class="token operator">=</span> <span class="token string">"some string in here"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- truthy</span>\n\n<span class="token keyword">var</span> zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- falsy</span>\n\n<span class="token keyword">var</span> numberGreaterThanZero <span class="token comment" spellcheck="true">// &lt;-- truthy</span>\n\n<span class="token keyword">var</span> emptyArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- truthy, we\'ll explore more about this next</span>\n\n<span class="token keyword">var</span> emptyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;-- truthy</span>\n</code></pre>\n      </div>\n<h2>Fun With Arrays</h2>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;-- truthy, will run code in if-block</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;-- truthy, will also run code in if-block</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;-- falsy, will NOT run code in if-block</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;-- falsy, will also NOT run code in if-block</span>\n</code></pre>\n      </div>\n<h2>Caveat</h2>\n<p>Be aware of the data type when evaluating a value in a Boolean context. If the data type of the value is meant to be a <em>number</em>, the truthy/falsy evalution can result in an unexpected outcome:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token punctuation">{</span> teamA<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> teamB<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">.</span>teamA<span class="token punctuation">)</span>\n  <span class="token comment" spellcheck="true">// The following won\'t run due to the falsy evaluation</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Team A: \'</span> <span class="token operator">+</span> match<span class="token punctuation">.</span>teamA<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>An alternative to the use case above is to evaluate the value using <code>typeof</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token punctuation">{</span> teamA<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> teamB<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> match<span class="token punctuation">.</span>teamA <span class="token operator">===</span> <span class="token string">\'number\'</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Team A: \'</span> <span class="token operator">+</span> match<span class="token punctuation">.</span>teamA<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h2>More Information</h2>\n<ul>\n<li>\n<p><a><strong>truthy</strong></a> | <a href=\'http://james.padolsey.com/javascript/truthy-falsey/\' target=\'_blank\' rel=\'nofollow\'>Blog Post - Truthy &#x26; Falsey</a></p>\n</li>\n<li>\n<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy"> Falsy | Glossary | MDN</a></p>\n</li>\n<li>\n<p><a href="https://www.sitepoint.com/javascript-truthy-falsy/">Truthy and Falsy: When All is Not Equal in JavaScript</a></p>\n</li>\n</ul>',fields:{slug:"/javascript/falsy-values/"},frontmatter:{title:"Falsy Values"}}},pathContext:{slug:"/javascript/falsy-values/"}}}});
//# sourceMappingURL=path---javascript-falsy-values-91cb6f2b63a183f7875f.js.map