{"version":3,"sources":["webpack:///path---react-life-cycle-methods-of-a-component-d71f373105028690cecc.js","webpack:///./.cache/json/react-life-cycle-methods-of-a-component.json"],"names":["webpackJsonp","6041","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,wnHAAAC,QAA+oHC,KAAA,6CAAmDC,aAAgBC,MAAA,uCAA8CC,aAAgBH,KAAA","file":"path---react-life-cycle-methods-of-a-component-d71f373105028690cecc.js","sourcesContent":["webpackJsonp([23753388798616],{\n\n/***/ 6041:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Life Cycle Methods Of A Component</h2>\\n<p>When we start working with components, we need to perform several actions to update state or to perform some actions when something changes in that component. In this scenario, life-cycle methods of a component comes handy !! So let us dive into them in this article.</p>\\n<p>Broadly, we can divide the life cycle methods into <strong>3</strong> categories.</p>\\n<ol>\\n<li>Mounting</li>\\n<li>Updating</li>\\n<li>Unmounting</li>\\n</ol>\\n<p>As life cycle methods are self explanatory, I’m just going to mention the method names. Please feel free to contribute to this article, if necessary.</p>\\n<h2>Mounting:</h2>\\n<p>a. <code>constructor()</code></p>\\n<p>b. <code>componentWillMount()</code></p>\\n<p>c. <code>render()</code></p>\\n<p>d. <code>componentDidMount()</code></p>\\n<h2>Updating:</h2>\\n<p>a. <code>componentWillRecieveProps()</code></p>\\n<p>b. <code>shouldComponentUpdate()</code></p>\\n<p>c. <code>componentWillUpdate()</code></p>\\n<p>d. <code>render()</code></p>\\n<p>e. <code>componentDidUpdate()</code></p>\\n<h2>Unmounting:</h2>\\n<p>a. <code>componentWillUnmount()</code></p>\\n<h2>Some interesting facts to notice:</h2>\\n<ul>\\n<li><code>constructor</code>, <code>componentWillMount</code>, <code>componentDidMount</code> and <code>componentWillUnmount</code> will be called only once during the lifecycle of a component.</li>\\n<li><code>componentWillUpdate</code>,  and <code>componentDidUpdate</code> will only be executed if and only if <code>shouldComponentUpdate</code> returns true.</li>\\n<li><code>componentWillUnmount()</code>will be called just before unmounting any component and hence can be used to free up the used memory, close any connections to DB, etc.</li>\\n</ul>\\n<h2>WARNING!!!</h2>\\n<p>Starting in React v16.3.0, React is starting to deprecate certain lifecycles</p>\\n<ul>\\n<li><code>componentWillMount</code></li>\\n<li><code>componentWillReceiveProps</code></li>\\n<li><code>componentWillUpdate</code></li>\\n</ul>\\n<p>Many things can be learned by diving into coding. So get your hands dirty by coding.</p>\\n<p>Note:</p>\\n<blockquote>\\n<p>“Deprecation warnings will be enabled with a future 16.x release, <strong>but the legacy lifecycles will continue to work until version 17.</strong>”<sup>1</sup></p>\\n</blockquote>\\n<blockquote>\\n<p>“Even in version 17, it will still be possible to use them, but they will be aliased with an “UNSAFE_” prefix to indicate that they might cause issues. We have also prepared an <a href=\\\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\\\">automated script to rename them</a> in existing code.”<sup>1</sup></p>\\n</blockquote>\\n<p>In other words, these previouse lifecycles methods will still be available as:</p>\\n<ul>\\n<li><code>UNSAFE_componentWillMount</code></li>\\n<li><code>UNSAFE_componentWillReceiveProps</code></li>\\n<li><code>UNSAFE_componentWillUpdate</code></li>\\n</ul>\\n<h2>New Lifecycle Methods</h2>\\n<p>New lifecycle methods will be introduced in React 17</p>\\n<ul>\\n<li><code>getDerivedStateFromProps</code> will be a safer alternative to <code>componentWillReceiveProps</code>.</li>\\n<li><code>getSnapshotBeforeUpdate</code> will be added to support safely reading properties from the DOM updates are made</li>\\n</ul>\\n<p>Many things can be learned by diving into coding. So get your hands dirty by coding.</p>\\n<h3>Sources</h3>\\n<ol>\\n<li><a href=\\\"https://reactjs.org/blog/2018/03/29/react-v-16-3.html\\\">Vaughn, Brian. “React v16.3.0: New lifecycles and context API”. March 29, 2018. Accessed: May 22, 2018.</a></li>\\n</ol>\\n<h3>Resources</h3>\\n<p><a href=\\\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\\\">Update on Async Rendering</a></p>\",\"fields\":{\"slug\":\"/react/life-cycle-methods-of-a-component/\"},\"frontmatter\":{\"title\":\"Life Cycle Methods Of A Component\"}}},\"pathContext\":{\"slug\":\"/react/life-cycle-methods-of-a-component/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---react-life-cycle-methods-of-a-component-d71f373105028690cecc.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Life Cycle Methods Of A Component</h2>\\n<p>When we start working with components, we need to perform several actions to update state or to perform some actions when something changes in that component. In this scenario, life-cycle methods of a component comes handy !! So let us dive into them in this article.</p>\\n<p>Broadly, we can divide the life cycle methods into <strong>3</strong> categories.</p>\\n<ol>\\n<li>Mounting</li>\\n<li>Updating</li>\\n<li>Unmounting</li>\\n</ol>\\n<p>As life cycle methods are self explanatory, I’m just going to mention the method names. Please feel free to contribute to this article, if necessary.</p>\\n<h2>Mounting:</h2>\\n<p>a. <code>constructor()</code></p>\\n<p>b. <code>componentWillMount()</code></p>\\n<p>c. <code>render()</code></p>\\n<p>d. <code>componentDidMount()</code></p>\\n<h2>Updating:</h2>\\n<p>a. <code>componentWillRecieveProps()</code></p>\\n<p>b. <code>shouldComponentUpdate()</code></p>\\n<p>c. <code>componentWillUpdate()</code></p>\\n<p>d. <code>render()</code></p>\\n<p>e. <code>componentDidUpdate()</code></p>\\n<h2>Unmounting:</h2>\\n<p>a. <code>componentWillUnmount()</code></p>\\n<h2>Some interesting facts to notice:</h2>\\n<ul>\\n<li><code>constructor</code>, <code>componentWillMount</code>, <code>componentDidMount</code> and <code>componentWillUnmount</code> will be called only once during the lifecycle of a component.</li>\\n<li><code>componentWillUpdate</code>,  and <code>componentDidUpdate</code> will only be executed if and only if <code>shouldComponentUpdate</code> returns true.</li>\\n<li><code>componentWillUnmount()</code>will be called just before unmounting any component and hence can be used to free up the used memory, close any connections to DB, etc.</li>\\n</ul>\\n<h2>WARNING!!!</h2>\\n<p>Starting in React v16.3.0, React is starting to deprecate certain lifecycles</p>\\n<ul>\\n<li><code>componentWillMount</code></li>\\n<li><code>componentWillReceiveProps</code></li>\\n<li><code>componentWillUpdate</code></li>\\n</ul>\\n<p>Many things can be learned by diving into coding. So get your hands dirty by coding.</p>\\n<p>Note:</p>\\n<blockquote>\\n<p>“Deprecation warnings will be enabled with a future 16.x release, <strong>but the legacy lifecycles will continue to work until version 17.</strong>”<sup>1</sup></p>\\n</blockquote>\\n<blockquote>\\n<p>“Even in version 17, it will still be possible to use them, but they will be aliased with an “UNSAFE_” prefix to indicate that they might cause issues. We have also prepared an <a href=\\\"https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles\\\">automated script to rename them</a> in existing code.”<sup>1</sup></p>\\n</blockquote>\\n<p>In other words, these previouse lifecycles methods will still be available as:</p>\\n<ul>\\n<li><code>UNSAFE_componentWillMount</code></li>\\n<li><code>UNSAFE_componentWillReceiveProps</code></li>\\n<li><code>UNSAFE_componentWillUpdate</code></li>\\n</ul>\\n<h2>New Lifecycle Methods</h2>\\n<p>New lifecycle methods will be introduced in React 17</p>\\n<ul>\\n<li><code>getDerivedStateFromProps</code> will be a safer alternative to <code>componentWillReceiveProps</code>.</li>\\n<li><code>getSnapshotBeforeUpdate</code> will be added to support safely reading properties from the DOM updates are made</li>\\n</ul>\\n<p>Many things can be learned by diving into coding. So get your hands dirty by coding.</p>\\n<h3>Sources</h3>\\n<ol>\\n<li><a href=\\\"https://reactjs.org/blog/2018/03/29/react-v-16-3.html\\\">Vaughn, Brian. “React v16.3.0: New lifecycles and context API”. March 29, 2018. Accessed: May 22, 2018.</a></li>\\n</ol>\\n<h3>Resources</h3>\\n<p><a href=\\\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\\\">Update on Async Rendering</a></p>\",\"fields\":{\"slug\":\"/react/life-cycle-methods-of-a-component/\"},\"frontmatter\":{\"title\":\"Life Cycle Methods Of A Component\"}}},\"pathContext\":{\"slug\":\"/react/life-cycle-methods-of-a-component/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/react-life-cycle-methods-of-a-component.json\n// module id = 6041\n// module chunks = 23753388798616"],"sourceRoot":""}