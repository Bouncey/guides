{"version":3,"sources":["webpack:///path---java-tokens-57c9fe36ba59e4c9e5ef.js","webpack:///./.cache/json/java-tokens.json"],"names":["webpackJsonp","4493","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,qsEAA26DC,QAAyTC,KAAA,iBAAuBC,aAAgBC,MAAA,YAAmBC,aAAgBH,KAAA","file":"path---java-tokens-57c9fe36ba59e4c9e5ef.js","sourcesContent":["webpackJsonp([225655042889845],{\n\n/***/ 4493:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Tokens in Java</h1>\\n<p>These are the fundamental building blocks of a program or the smallest unit of a program.\\nJava supports five types of tokens:</p>\\n<h2>1. Keywords</h2>\\n<p>These are the words which have their predefined definitions in the compiler and cannot be used as the names of the identifiers.There are 51 keywords and 2 reserved words in Java.</p>\\n<h2>2. Identifiers</h2>\\n<p>These are the various names given to different components of the program. These includes the names of variables, methods, class, etc. They must not begin with a digit but can contain digits, letters, underscore, currency symbols.</p>\\n<h2>3. Literals</h2>\\n<p>These provide a way to express specific values in a program.These are of following types:</p>\\n<h3>Numeric Literals</h3>\\n<p>These are of three types in Java.</p>\\n<ul>\\n<li>\\n<h4>Integer Literals</h4>\\n</li>\\n<li>\\n<h4>Floating Point Literals</h4>\\n</li>\\n<li>\\n<h4>Character Literals</h4>\\n<h3>Boolean Literals</h3>\\n<p>These are of two types</p>\\n</li>\\n<li>\\n<h4>true</h4>\\n</li>\\n<li>\\n<h4>false</h4>\\n<h3>String Literals</h3>\\n<h2>4. Operators</h2>\\n<p>These are the special types of symbols used to perform certain operations. For example +, -, *, /, % </p>\\n<h2>5. Seperators</h2>\\n<p>These include tab, enter, space bar.</p>\\n<h5>Now let us consider a program</h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//Printing Hello World</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>public class Hello</p>\\n<p>{</p>\\n<p>public static void main(String args[])</p>\\n<p>{</p>\\n<p>System.out.println(“Hello World”);</p>\\n<p>}</p>\\n<p>}</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>The source code contains tokens such as _public_, _class_, _Hello_, {, _public_, _static_, _void_, _main_, (, _String_, [], _args_, {, _System_, _out_, _println_, (, _\\\"Hello World\\\"_, }, }. The resulting tokens· are compiled into Java bytecodes that is capable of being run from within an interpreted java environment. Token are useful for compiler to detect errors. When tokens are not arranged in a particular sequence, the compiler generates an error message.</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/java/tokens/\"},\"frontmatter\":{\"title\":\"tokens\"}}},\"pathContext\":{\"slug\":\"/java/tokens/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-tokens-57c9fe36ba59e4c9e5ef.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Tokens in Java</h1>\\n<p>These are the fundamental building blocks of a program or the smallest unit of a program.\\nJava supports five types of tokens:</p>\\n<h2>1. Keywords</h2>\\n<p>These are the words which have their predefined definitions in the compiler and cannot be used as the names of the identifiers.There are 51 keywords and 2 reserved words in Java.</p>\\n<h2>2. Identifiers</h2>\\n<p>These are the various names given to different components of the program. These includes the names of variables, methods, class, etc. They must not begin with a digit but can contain digits, letters, underscore, currency symbols.</p>\\n<h2>3. Literals</h2>\\n<p>These provide a way to express specific values in a program.These are of following types:</p>\\n<h3>Numeric Literals</h3>\\n<p>These are of three types in Java.</p>\\n<ul>\\n<li>\\n<h4>Integer Literals</h4>\\n</li>\\n<li>\\n<h4>Floating Point Literals</h4>\\n</li>\\n<li>\\n<h4>Character Literals</h4>\\n<h3>Boolean Literals</h3>\\n<p>These are of two types</p>\\n</li>\\n<li>\\n<h4>true</h4>\\n</li>\\n<li>\\n<h4>false</h4>\\n<h3>String Literals</h3>\\n<h2>4. Operators</h2>\\n<p>These are the special types of symbols used to perform certain operations. For example +, -, *, /, % </p>\\n<h2>5. Seperators</h2>\\n<p>These include tab, enter, space bar.</p>\\n<h5>Now let us consider a program</h5>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//Printing Hello World</span>\\n</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>public class Hello</p>\\n<p>{</p>\\n<p>public static void main(String args[])</p>\\n<p>{</p>\\n<p>System.out.println(“Hello World”);</p>\\n<p>}</p>\\n<p>}</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>The source code contains tokens such as _public_, _class_, _Hello_, {, _public_, _static_, _void_, _main_, (, _String_, [], _args_, {, _System_, _out_, _println_, (, _\\\"Hello World\\\"_, }, }. The resulting tokens· are compiled into Java bytecodes that is capable of being run from within an interpreted java environment. Token are useful for compiler to detect errors. When tokens are not arranged in a particular sequence, the compiler generates an error message.</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/java/tokens/\"},\"frontmatter\":{\"title\":\"tokens\"}}},\"pathContext\":{\"slug\":\"/java/tokens/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-tokens.json\n// module id = 4493\n// module chunks = 225655042889845"],"sourceRoot":""}