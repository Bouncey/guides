webpackJsonp([46797138634802],{6015:function(n,e){n.exports={data:{markdownRemark:{html:'<p><a href=\'https://docs.python.org/3/reference/simple_stmts.html#the-return-statement\' target=\'_blank\' rel=\'nofollow\'>Python Docs</a></p>\n<p>All functions return a value when called.</p>\n<p>If a return statement is followed by an expression list, that expression list is evaluated and the value is returned:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> def greater_than_1(n):\n...     return n > 1\n...\n>>> print(greater_than_1(1))\nFalse\n>>> print(greater_than_1(2))\nTrue</code></pre>\n      </div>\n<p>If no expression list is specified, <code>None</code> is returned:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> def no_expression_list():\n...     return    # No return expression list.\n...\n>>> print(no_expression_list())\nNone</code></pre>\n      </div>\n<p>If a return statement is reached during the execution of a function, the current function call is left at that point:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> def return_middle():\n...     a = 1\n...     return a\n...     a = 2     # This assignment is never reached.\n...\n>>> print(return_middle())\n1</code></pre>\n      </div>\n<p>If there is no return statement the function returns None when it reaches the end:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>>>> def no_return():\n...     pass     # No return statement.\n...\n>>> print(no_return())\nNone\n </code></pre>\n      </div>\n<p> A single function can have multiple <code>return</code> statements.  Execution of the function ends when one of these <code>return</code> statements is reached:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code> >>> def multiple_returns(n):\n ...    if(n):\n ...        return "First Return Statement"\n ...    else:\n ...        return "Second Return Statement"\n ...\n >>> print(multiple_returns(True))\n First Return Statement\n >>> print(multiple_returns(False))\n Second Return Statement\n </code></pre>\n      </div>\n<p> A single function can return various types:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code> >>> def various_return_types(n):\n ...     if(n==1):\n ...         return "Hello World."   # Return a string\n ...     elif(n==2):\n ...         return 42               # Return a value\n ...     else:\n ...         return True             # Return a boolean\n ... \n >>> print(various_return_types(1))\n Hello World.\n >>> print(various_return_types(2))\n 42\n >>> print(various_return_types(3))\n True</code></pre>\n      </div>\n<p> It is even possible to have a single function return multiple values with only a single return:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code> >>> def return_two_values():\n ...     a = 40\n ...     b = 2\n ...     return a,b\n ...\n >>> print("First value = %d,  Second value = %d" %(return_two_values()))\n First value = 40,  Second value = 2</code></pre>\n      </div>',fields:{slug:"/python/return-statement/"},frontmatter:{title:"Python Return Statement"}}},pathContext:{slug:"/python/return-statement/"}}}});
//# sourceMappingURL=path---python-return-statement-3f5767367214c55a5dab.js.map