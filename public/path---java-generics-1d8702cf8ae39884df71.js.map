{"version":3,"sources":["webpack:///path---java-generics-1d8702cf8ae39884df71.js","webpack:///./.cache/json/java-generics.json"],"names":["webpackJsonp","4473","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,6iFAAgjFC,QAAsHC,KAAA,mBAAyBC,aAAgBC,MAAA,cAAqBC,aAAgBH,KAAA","file":"path---java-generics-1d8702cf8ae39884df71.js","sourcesContent":["webpackJsonp([206816448551194],{\n\n/***/ 4473:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Generics</h1>\\n<p>In a nutshell, generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods. Much like the more familiar formal parameters used in method declarations, type parameters provide a way for you to re-use the same code with different inputs. The difference is that the inputs to formal parameters are values, while the inputs to type parameters are types.</p>\\n<p>Code without generics require type-casting.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>List list <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nlist<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nString s <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">)</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Code with generics:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>List<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nlist<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nString s <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// no cast</span>\\n</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/java/generics/\"},\"frontmatter\":{\"title\":\"Generics\"}}},\"pathContext\":{\"slug\":\"/java/generics/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-generics-1d8702cf8ae39884df71.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Generics</h1>\\n<p>In a nutshell, generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods. Much like the more familiar formal parameters used in method declarations, type parameters provide a way for you to re-use the same code with different inputs. The difference is that the inputs to formal parameters are values, while the inputs to type parameters are types.</p>\\n<p>Code without generics require type-casting.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>List list <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nlist<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nString s <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">)</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Code with generics:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>List<span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span> list <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">ArrayList</span><span class=\\\"token operator\\\">&lt;</span>String<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nlist<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">add</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"hello\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nString s <span class=\\\"token operator\\\">=</span> list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// no cast</span>\\n</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/java/generics/\"},\"frontmatter\":{\"title\":\"Generics\"}}},\"pathContext\":{\"slug\":\"/java/generics/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-generics.json\n// module id = 4473\n// module chunks = 206816448551194"],"sourceRoot":""}