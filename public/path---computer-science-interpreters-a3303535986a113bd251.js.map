{"version":3,"sources":["webpack:///path---computer-science-interpreters-a3303535986a113bd251.js","webpack:///./.cache/json/computer-science-interpreters.json"],"names":["webpackJsonp","3974","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,mxCAAAC,QAA8yCC,KAAA,mCAAyCC,aAAgBC,MAAA,kBAAyBC,aAAgBH,KAAA","file":"path---computer-science-interpreters-a3303535986a113bd251.js","sourcesContent":["webpackJsonp([123618935667457],{\n\n/***/ 3974:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Interpreters</h2>\\n<p>Interpreters are a kind of translator. Interpreters take source code - code written in JavaScript, Python, and other languages. Then they translate it into code the computer understands.</p>\\n<p>This translated code is binary code. It is nothing but 1s and 0s. Interpreters translate the source code line-by-line, while running the binary code. The program will run until the interpreter finds errors in the source code. Then it will stop translating/running the program and flag the errors.</p>\\n<p>To compare, compilers convert all the source code at once to binary code, then run the binary code.</p>\\n<h4>More Information:</h4>\\n<p><a href=\\\"https://medium.freecodecamp.org/a-gentler-introduction-to-programming-707453a79ee8\\\">Matt Adesanya’s “A Gentler Introduction to Programming”</a> compares compilers and interpreters, and introduces other basic programming concepts.</p>\\n<p>Some Interpreted Languages:</p>\\n<ul>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Python_(programming_language)\\\">Python</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/JavaScript\\\">JavaScript</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Ruby_(programming_language)\\\">Ruby</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Forth_(programming_language)\\\">Forth</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/computer-science/interpreters/\"},\"frontmatter\":{\"title\":\"Interpreters\"}}},\"pathContext\":{\"slug\":\"/computer-science/interpreters/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---computer-science-interpreters-a3303535986a113bd251.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Interpreters</h2>\\n<p>Interpreters are a kind of translator. Interpreters take source code - code written in JavaScript, Python, and other languages. Then they translate it into code the computer understands.</p>\\n<p>This translated code is binary code. It is nothing but 1s and 0s. Interpreters translate the source code line-by-line, while running the binary code. The program will run until the interpreter finds errors in the source code. Then it will stop translating/running the program and flag the errors.</p>\\n<p>To compare, compilers convert all the source code at once to binary code, then run the binary code.</p>\\n<h4>More Information:</h4>\\n<p><a href=\\\"https://medium.freecodecamp.org/a-gentler-introduction-to-programming-707453a79ee8\\\">Matt Adesanya’s “A Gentler Introduction to Programming”</a> compares compilers and interpreters, and introduces other basic programming concepts.</p>\\n<p>Some Interpreted Languages:</p>\\n<ul>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Python_(programming_language)\\\">Python</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/JavaScript\\\">JavaScript</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Ruby_(programming_language)\\\">Ruby</a></li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Forth_(programming_language)\\\">Forth</a></li>\\n</ul>\",\"fields\":{\"slug\":\"/computer-science/interpreters/\"},\"frontmatter\":{\"title\":\"Interpreters\"}}},\"pathContext\":{\"slug\":\"/computer-science/interpreters/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/computer-science-interpreters.json\n// module id = 3974\n// module chunks = 123618935667457"],"sourceRoot":""}