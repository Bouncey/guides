{"version":3,"sources":["webpack:///path---javascript-standard-objects-promise-promise-reject-85083b797bfc9551d0aa.js","webpack:///./.cache/json/javascript-standard-objects-promise-promise-reject.json"],"names":["webpackJsonp","4813","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,onBAAkmBC,QAAuCC,KAAA,wDAA8DC,aAAgBC,MAAA,oBAA2BC,aAAgBH,KAAA","file":"path---javascript-standard-objects-promise-promise-reject-85083b797bfc9551d0aa.js","sourcesContent":["webpackJsonp([175154118144919],{\n\n/***/ 4813:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Promise Reject</h2>\\n<p> A <code>Promise.reject</code> function returns an error condition to the calling function. It takes a single parameter, an Error object or value, as the reason for rejection.</p>\\n<p>Chaining a catch function at the end of a Promise caller will allow you to catch the error condition.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>promiseCallingFunction(paramList)\\n  .then( ... )\\n  ...\\n  .then( ... )\\n  .catch( function(err) { // catch function\\n    /*\\n     * this is where you can access the reason for the rejection\\n     */ \\n  });</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/javascript/standard-objects/promise/promise-reject/\"},\"frontmatter\":{\"title\":\"Promise Reject\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/promise/promise-reject/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-standard-objects-promise-promise-reject-85083b797bfc9551d0aa.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Promise Reject</h2>\\n<p> A <code>Promise.reject</code> function returns an error condition to the calling function. It takes a single parameter, an Error object or value, as the reason for rejection.</p>\\n<p>Chaining a catch function at the end of a Promise caller will allow you to catch the error condition.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>promiseCallingFunction(paramList)\\n  .then( ... )\\n  ...\\n  .then( ... )\\n  .catch( function(err) { // catch function\\n    /*\\n     * this is where you can access the reason for the rejection\\n     */ \\n  });</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/javascript/standard-objects/promise/promise-reject/\"},\"frontmatter\":{\"title\":\"Promise Reject\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/promise/promise-reject/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-standard-objects-promise-promise-reject.json\n// module id = 4813\n// module chunks = 175154118144919"],"sourceRoot":""}