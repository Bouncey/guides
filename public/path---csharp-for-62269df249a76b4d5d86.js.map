{"version":3,"sources":["webpack:///path---csharp-for-62269df249a76b4d5d86.js","webpack:///./.cache/json/csharp-for.json"],"names":["webpackJsonp","4014","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,++BAA6uBC,QAAuRC,KAAA,gBAAsBC,aAAgBC,MAAA,cAAqBC,aAAgBH,KAAA","file":"path---csharp-for-62269df249a76b4d5d86.js","sourcesContent":["webpackJsonp([255767195218338],{\n\n/***/ 4014:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>For Loop</h1>\\n<p>The <code>for</code> loop executes a block of code until a specified condition is false. Although a <code>for</code> loop looks like a <a href='https://guide.freecodecamp.org/csharp/while-loop' target='_blank' rel='nofollow'><code>while</code> loop</a>, developers should use them <strong>properly</strong>. Use <code>while</code> loops when the number of iterations are varied, otherwise use <code>for</code> loops. A common use of <code>for</code> loops are array iterations.</p>\\n<h2>Example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>int[] array = { 1, 2, 3, 4, 5 };\\nfor (int i = 0; i < array.Length; i++)\\n{\\n\\tConsole.WriteLine(\\\"Item on index {0} is {1}\\\", i, array[i]);\\n}</code></pre>\\n      </div>\\n<h2>Output:</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> Item on index 0 is 1\\n> Item on index 1 is 2\\n> Item on index 2 is 3\\n> Item on index 3 is 4\\n> Item on index 4 is 5</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/csharp/for/\"},\"frontmatter\":{\"title\":\"For Loop\"}}},\"pathContext\":{\"slug\":\"/csharp/for/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---csharp-for-62269df249a76b4d5d86.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>For Loop</h1>\\n<p>The <code>for</code> loop executes a block of code until a specified condition is false. Although a <code>for</code> loop looks like a <a href='https://guide.freecodecamp.org/csharp/while-loop' target='_blank' rel='nofollow'><code>while</code> loop</a>, developers should use them <strong>properly</strong>. Use <code>while</code> loops when the number of iterations are varied, otherwise use <code>for</code> loops. A common use of <code>for</code> loops are array iterations.</p>\\n<h2>Example</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>int[] array = { 1, 2, 3, 4, 5 };\\nfor (int i = 0; i < array.Length; i++)\\n{\\n\\tConsole.WriteLine(\\\"Item on index {0} is {1}\\\", i, array[i]);\\n}</code></pre>\\n      </div>\\n<h2>Output:</h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>> Item on index 0 is 1\\n> Item on index 1 is 2\\n> Item on index 2 is 3\\n> Item on index 3 is 4\\n> Item on index 4 is 5</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/csharp/for/\"},\"frontmatter\":{\"title\":\"For Loop\"}}},\"pathContext\":{\"slug\":\"/csharp/for/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/csharp-for.json\n// module id = 4014\n// module chunks = 255767195218338"],"sourceRoot":""}