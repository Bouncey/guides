{"version":3,"sources":["webpack:///path---csharp-null-conditional-operator-fadc9484af6d9f032031.js","webpack:///./.cache/json/csharp-null-conditional-operator.json"],"names":["webpackJsonp","3937","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,grFAAwkFC,QAAyMC,KAAA,sCAA4CC,aAAgBC,MAAA,+BAAsCC,aAAgBH,KAAA","file":"path---csharp-null-conditional-operator-fadc9484af6d9f032031.js","sourcesContent":["webpackJsonp([216928848880734],{\n\n/***/ 3937:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Null-conditional Operator</h1>\\n<p>Null-conditional operators allow for null checking with a minimal amount of code. For example, if you had\\nan employee variable of type Employee with a property of type Address, you might do null checking as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Address address <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>employee <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    address <span class=\\\"token operator\\\">=</span> employee<span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You could use a standard conditional operator to make that check more concise:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Address address <span class=\\\"token operator\\\">=</span> employee <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> employee<span class=\\\"token punctuation\\\">.</span>Address <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>However, in C# 6.0 null-conditional operators were introduced, so now the above line can simply\\nbe represented as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Address address <span class=\\\"token operator\\\">=</span> student<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>If employee is null, address will simply be assigned null, and no NullReferenceExeception will occur.\\nThis becomes more useful with deeper object graphs, as you can handle a chain of conditional member access.\\nFor example:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">string</span> city <span class=\\\"token operator\\\">=</span> student<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span>City<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Null-conditional operators are short-circuiting, so as soon as one check of conditional member access\\nreturns null, the rest do not take place.</p>\",\"fields\":{\"slug\":\"/csharp/null-conditional-operator/\"},\"frontmatter\":{\"title\":\"Null-conditional Operator\"}}},\"pathContext\":{\"slug\":\"/csharp/null-conditional-operator/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---csharp-null-conditional-operator-fadc9484af6d9f032031.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Null-conditional Operator</h1>\\n<p>Null-conditional operators allow for null checking with a minimal amount of code. For example, if you had\\nan employee variable of type Employee with a property of type Address, you might do null checking as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Address address <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>employee <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n    address <span class=\\\"token operator\\\">=</span> employee<span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You could use a standard conditional operator to make that check more concise:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Address address <span class=\\\"token operator\\\">=</span> employee <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span> <span class=\\\"token operator\\\">?</span> employee<span class=\\\"token punctuation\\\">.</span>Address <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>However, in C# 6.0 null-conditional operators were introduced, so now the above line can simply\\nbe represented as follows:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code>Address address <span class=\\\"token operator\\\">=</span> student<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>If employee is null, address will simply be assigned null, and no NullReferenceExeception will occur.\\nThis becomes more useful with deeper object graphs, as you can handle a chain of conditional member access.\\nFor example:</p>\\n<h2></h2>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-csharp\\\"><code><span class=\\\"token keyword\\\">string</span> city <span class=\\\"token operator\\\">=</span> student<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span>Address<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">.</span>City<span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Null-conditional operators are short-circuiting, so as soon as one check of conditional member access\\nreturns null, the rest do not take place.</p>\",\"fields\":{\"slug\":\"/csharp/null-conditional-operator/\"},\"frontmatter\":{\"title\":\"Null-conditional Operator\"}}},\"pathContext\":{\"slug\":\"/csharp/null-conditional-operator/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/csharp-null-conditional-operator.json\n// module id = 3937\n// module chunks = 216928848880734"],"sourceRoot":""}