{"version":3,"sources":["webpack:///path---java-garbage-collection-203dcaefc88b2217f8ec.js","webpack:///./.cache/json/java-garbage-collection.json"],"names":["webpackJsonp","4472","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,u2SAAi0OC,QAAuyEC,KAAA,6BAAmCC,aAAgBC,MAAA,wBAA+BC,aAAgBH,KAAA","file":"path---java-garbage-collection-203dcaefc88b2217f8ec.js","sourcesContent":["webpackJsonp([2980514448048],{\n\n/***/ 4472:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Garbage Collection in Java</h1>\\n<p>In languages like C/C++, it is the duty of the programmer to create and destroy objects. But if the programmer does not performs his duty, sufficient memory may not be available for the creation of a new object and the program may terminate causing <strong>OutOfMemoryErrors</strong>.</p>\\n<p>Java relieves the programmer from memory management task and itself reclaims the memory occupied by the objects which are no longer in use. Garbage Collection in java is carried out by a daemon thread called <strong>Garbage Collector</strong>. <strong>JVM(Java Virtual Machine)</strong> invokes it when there is lack of memory(heap) for new objects.</p>\\n<h2>When an object becomes eligible for Garbage Collection?</h2>\\n<ul>\\n<li>An object becomes eligible for Garbage Collection if it is not reachable from any live threads or any static references.</li>\\n<li>\\n<p>An object becomes eligible for Garbage Collection if it’s all references are null.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>     Integer n <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     n <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\t\\t\\t                    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//the Integer object is no longer accessible</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>Cyclic dependencies are not counted as reference so if Object X has reference of Object Y and Object Y has reference of Object X and they don’t have any other live reference then both Objects X and Y will be eligible for Garbage Collection.</li>\\n</ul>\\n<h2>How to manually make an object eligible for Garbage Collection?</h2>\\n<ul>\\n<li>Even though it is not the task of the programmer to destroy the objects, it is a good programming practice to make an object unreachable(thus eligible for GC) after it is used.</li>\\n<li>There are generally four different ways to make an object eligible for garbage collection.</li>\\n<li>Nullifying the reference variable</li>\\n<li>Re-assigning the reference variable</li>\\n<li>Object is created inside a block and reference goes out of scope once control exit that block.</li>\\n<li><a href=\\\"http://www.geeksforgeeks.org/island-of-isolation-in-java/\\\">Island of Isolation</a></li>\\n</ul>\\n<h2>Ways of requesting JVM to run Garbage Collector<sup>1</sup></h2>\\n<ul>\\n<li>\\n<p>Though making an object eligible for Garbage Collection, it depends on sole discretion of JVM to run the Garbage Collector to destroy it.</p>\\n</li>\\n<li>\\n<p>We can also request JVM to run Garbage Collector. There are two ways to do it :</p>\\n</li>\\n<li>\\n<p>Using <em><strong>System.gc()</strong></em> method : System class contain static method gc() for requesting JVM to run Garbage Collector.</p>\\n</li>\\n<li>\\n<p>Using <em><strong>Runtime.getRuntime().gc()</strong></em> method : Runtime class allows the application to interface with the JVM in which the application is running. Hence by using its gc() method, we can request JVM to run Garbage Collector.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>     <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Java program to request</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// JVM to run Garbage Collector</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Test</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException\\n<span class=\\\"token punctuation\\\">{</span>\\n    Test test1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Test test2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Nullifying the reference variable</span>\\n    test1 <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// requesting JVM for running Garbage Collector</span>\\n    System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">gc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Nullifying the reference variable</span>\\n    test2 <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// requesting JVM for running Garbage Collector</span>\\n    Runtime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getRuntime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">gc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\n<span class=\\\"token punctuation\\\">}</span>\\n \\n<span class=\\\"token annotation punctuation\\\">@Override</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// finalize method is a method which is called on object once </span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// before garbage collector is destroying it and reclaiming its memory</span>\\n<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">finalize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> Throwable\\n<span class=\\\"token punctuation\\\">{</span>\\n    System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Garbage collector is called\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Object garbage collected : \\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>OUTPUT <span class=\\\"token operator\\\">-</span> \\nGarbage collector called\\nObject garbage collected <span class=\\\"token operator\\\">:</span> Test<span class=\\\"token annotation punctuation\\\">@46d08f12</span>\\nGarbage collector called\\nObject garbage collected <span class=\\\"token operator\\\">:</span> Test<span class=\\\"token annotation punctuation\\\">@481779b8</span>\\n</code></pre>\\n      </div>\\n<p>Note :</p>\\n</li>\\n<li>\\n<p>There is no guarantee that any one of above two methods will definitely run Garbage Collector.</p>\\n</li>\\n<li>\\n<p>The call System.gc() is effectively equivalent to the call : Runtime.getRuntime().gc()</p>\\n</li>\\n</ul>\\n<h2>Object Finalization</h2>\\n<ul>\\n<li>Objects have resources associtated with them. It is their responsibility to free the resources. </li>\\n<li>The finalize(), is declared in Object class and is called by garbage collector once, just before destroying the object. An object can take any last action using this method jst before its area is reclaimed by the garbage collector.</li>\\n<li>\\n<p>finalize() method is present in Object class with following prototype.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">finalize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> Throwable\\n</code></pre>\\n      </div>\\n<h2>NOTE<sup>1</sup> :</h2>\\n</li>\\n<li>The finalize() method called by Garbage Collector not JVM. Although Garbage Collector is one of the module of JVM.</li>\\n<li>Object class finalize() method has empty implementation, thus it is recommended to override finalize() method to dispose of system resources or to perform other cleanup.</li>\\n<li>The finalize() method is never invoked more than once for any given object.</li>\\n<li>\\n<p>If an uncaught exception is thrown by the finalize() method, the exception is ignored and finalization of that object terminates.</p>\\n<h3>SOURCES</h3>\\n</li>\\n<li><a href=\\\"http://www.geeksforgeeks.org/garbage-collection-java/\\\">geeksforgeeks.</a>Accessed: October 24,2017.</li>\\n</ul>\",\"fields\":{\"slug\":\"/java/garbage-collection/\"},\"frontmatter\":{\"title\":\"Garbage Collection\"}}},\"pathContext\":{\"slug\":\"/java/garbage-collection/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---java-garbage-collection-203dcaefc88b2217f8ec.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Garbage Collection in Java</h1>\\n<p>In languages like C/C++, it is the duty of the programmer to create and destroy objects. But if the programmer does not performs his duty, sufficient memory may not be available for the creation of a new object and the program may terminate causing <strong>OutOfMemoryErrors</strong>.</p>\\n<p>Java relieves the programmer from memory management task and itself reclaims the memory occupied by the objects which are no longer in use. Garbage Collection in java is carried out by a daemon thread called <strong>Garbage Collector</strong>. <strong>JVM(Java Virtual Machine)</strong> invokes it when there is lack of memory(heap) for new objects.</p>\\n<h2>When an object becomes eligible for Garbage Collection?</h2>\\n<ul>\\n<li>An object becomes eligible for Garbage Collection if it is not reachable from any live threads or any static references.</li>\\n<li>\\n<p>An object becomes eligible for Garbage Collection if it’s all references are null.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>     Integer n <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Integer</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     n <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\t\\t\\t                    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//the Integer object is no longer accessible</span>\\n</code></pre>\\n      </div>\\n</li>\\n<li>Cyclic dependencies are not counted as reference so if Object X has reference of Object Y and Object Y has reference of Object X and they don’t have any other live reference then both Objects X and Y will be eligible for Garbage Collection.</li>\\n</ul>\\n<h2>How to manually make an object eligible for Garbage Collection?</h2>\\n<ul>\\n<li>Even though it is not the task of the programmer to destroy the objects, it is a good programming practice to make an object unreachable(thus eligible for GC) after it is used.</li>\\n<li>There are generally four different ways to make an object eligible for garbage collection.</li>\\n<li>Nullifying the reference variable</li>\\n<li>Re-assigning the reference variable</li>\\n<li>Object is created inside a block and reference goes out of scope once control exit that block.</li>\\n<li><a href=\\\"http://www.geeksforgeeks.org/island-of-isolation-in-java/\\\">Island of Isolation</a></li>\\n</ul>\\n<h2>Ways of requesting JVM to run Garbage Collector<sup>1</sup></h2>\\n<ul>\\n<li>\\n<p>Though making an object eligible for Garbage Collection, it depends on sole discretion of JVM to run the Garbage Collector to destroy it.</p>\\n</li>\\n<li>\\n<p>We can also request JVM to run Garbage Collector. There are two ways to do it :</p>\\n</li>\\n<li>\\n<p>Using <em><strong>System.gc()</strong></em> method : System class contain static method gc() for requesting JVM to run Garbage Collector.</p>\\n</li>\\n<li>\\n<p>Using <em><strong>Runtime.getRuntime().gc()</strong></em> method : Runtime class allows the application to interface with the JVM in which the application is running. Hence by using its gc() method, we can request JVM to run Garbage Collector.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>     <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Java program to request</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// JVM to run Garbage Collector</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Test</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span>String<span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> InterruptedException\\n<span class=\\\"token punctuation\\\">{</span>\\n    Test test1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    Test test2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Test</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Nullifying the reference variable</span>\\n    test1 <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// requesting JVM for running Garbage Collector</span>\\n    System<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">gc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Nullifying the reference variable</span>\\n    test2 <span class=\\\"token operator\\\">=</span> null<span class=\\\"token punctuation\\\">;</span>\\n     \\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// requesting JVM for running Garbage Collector</span>\\n    Runtime<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getRuntime</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">gc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n \\n<span class=\\\"token punctuation\\\">}</span>\\n \\n<span class=\\\"token annotation punctuation\\\">@Override</span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// finalize method is a method which is called on object once </span>\\n<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// before garbage collector is destroying it and reclaiming its memory</span>\\n<span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">finalize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> Throwable\\n<span class=\\\"token punctuation\\\">{</span>\\n    System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Garbage collector is called\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    System<span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Object garbage collected : \\\"</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>OUTPUT <span class=\\\"token operator\\\">-</span> \\nGarbage collector called\\nObject garbage collected <span class=\\\"token operator\\\">:</span> Test<span class=\\\"token annotation punctuation\\\">@46d08f12</span>\\nGarbage collector called\\nObject garbage collected <span class=\\\"token operator\\\">:</span> Test<span class=\\\"token annotation punctuation\\\">@481779b8</span>\\n</code></pre>\\n      </div>\\n<p>Note :</p>\\n</li>\\n<li>\\n<p>There is no guarantee that any one of above two methods will definitely run Garbage Collector.</p>\\n</li>\\n<li>\\n<p>The call System.gc() is effectively equivalent to the call : Runtime.getRuntime().gc()</p>\\n</li>\\n</ul>\\n<h2>Object Finalization</h2>\\n<ul>\\n<li>Objects have resources associtated with them. It is their responsibility to free the resources. </li>\\n<li>The finalize(), is declared in Object class and is called by garbage collector once, just before destroying the object. An object can take any last action using this method jst before its area is reclaimed by the garbage collector.</li>\\n<li>\\n<p>finalize() method is present in Object class with following prototype.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">protected</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">finalize</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">throws</span> Throwable\\n</code></pre>\\n      </div>\\n<h2>NOTE<sup>1</sup> :</h2>\\n</li>\\n<li>The finalize() method called by Garbage Collector not JVM. Although Garbage Collector is one of the module of JVM.</li>\\n<li>Object class finalize() method has empty implementation, thus it is recommended to override finalize() method to dispose of system resources or to perform other cleanup.</li>\\n<li>The finalize() method is never invoked more than once for any given object.</li>\\n<li>\\n<p>If an uncaught exception is thrown by the finalize() method, the exception is ignored and finalization of that object terminates.</p>\\n<h3>SOURCES</h3>\\n</li>\\n<li><a href=\\\"http://www.geeksforgeeks.org/garbage-collection-java/\\\">geeksforgeeks.</a>Accessed: October 24,2017.</li>\\n</ul>\",\"fields\":{\"slug\":\"/java/garbage-collection/\"},\"frontmatter\":{\"title\":\"Garbage Collection\"}}},\"pathContext\":{\"slug\":\"/java/garbage-collection/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/java-garbage-collection.json\n// module id = 4472\n// module chunks = 2980514448048"],"sourceRoot":""}