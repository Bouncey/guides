{"version":3,"sources":["webpack:///path---typescript-interfaces-34c75ee0164000ff84f5.js","webpack:///./.cache/json/typescript-interfaces.json"],"names":["webpackJsonp","6247","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,6lFAA8pFC,QAAgDC,KAAA,2BAAiCC,aAAgBC,MAAA,gBAAuBC,aAAgBH,KAAA","file":"path---typescript-interfaces-34c75ee0164000ff84f5.js","sourcesContent":["webpackJsonp([183758247536299],{\n\n/***/ 6247:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Interfaces</h1>\\n<p>One of TypeScript’s core principles is that type-checking focuses on the shape that values have. This is sometimes called “duck typing” or “structural subtyping”. In TypeScript, <code>interfaces</code> fill the role of naming these types, and are a powerful way of defining contracts within your code as well as contracts with code outside of your project.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n    lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">printUserInfo</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">:</span> User<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>firstName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> myObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John'</span><span class=\\\"token punctuation\\\">,</span> lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Doe'</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">printUserInfo</span><span class=\\\"token punctuation\\\">(</span>myObj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Interfaces can contain optional parameters</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    email<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/typescript/interfaces/\"},\"frontmatter\":{\"title\":\"Interfaces\"}}},\"pathContext\":{\"slug\":\"/typescript/interfaces/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---typescript-interfaces-34c75ee0164000ff84f5.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h1>Interfaces</h1>\\n<p>One of TypeScript’s core principles is that type-checking focuses on the shape that values have. This is sometimes called “duck typing” or “structural subtyping”. In TypeScript, <code>interfaces</code> fill the role of naming these types, and are a powerful way of defining contracts within your code as well as contracts with code outside of your project.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n    lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">printUserInfo</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">:</span> User<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>user<span class=\\\"token punctuation\\\">.</span>firstName<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> myObj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>firstName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'John'</span><span class=\\\"token punctuation\\\">,</span> lastName<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Doe'</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">printUserInfo</span><span class=\\\"token punctuation\\\">(</span>myObj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Interfaces can contain optional parameters</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    email<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">string</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\",\"fields\":{\"slug\":\"/typescript/interfaces/\"},\"frontmatter\":{\"title\":\"Interfaces\"}}},\"pathContext\":{\"slug\":\"/typescript/interfaces/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/typescript-interfaces.json\n// module id = 6247\n// module chunks = 183758247536299"],"sourceRoot":""}