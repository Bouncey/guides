webpackJsonp([0x6609e27f9b37],{4326:function(e,t){e.exports={data:{markdownRemark:{html:'<h1>Tagging in Git</h1>\n<p>Git tags are commonly used to highlight important commits by adding a mark file with a reference in the Git database. They can be a great help to fast find major changes, release points or other relevant commits in large projects.</p>\n<p>You can create, edit and list the available tags in a project with a few easy commands:</p>\n<h2>Listing available tags</h2>\n<p>You can list all available tags in a project with the <code>git tag</code> command (nate that they will appear in alphabetical order):</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git tag\nv1.0\nv2.0\nv3.0</code></pre>\n      </div>\n<p>This way of listing tags is great for small projects, but greater projects can have hundreds of tags, so you may need to filter them when searching for an important point in the history. You can find tags containing specific characters adding an <code>-l</code> to the <code>git tag</code> command:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git tag -l "v2.0*"\nv2.0.1\nv2.0.2\nv2.0.3\nv2.0.4</code></pre>\n      </div>\n<h2>Create a tag</h2>\n<p>You can create two type of tags: annotated and lightweight. They first ones are compete objects in GIT database: they are checksummed, requiere a message (like commits) and store other important data such as name, email and date. On the other hand, lightweight tags don require a mesage or store other data, working just as a pointer to a specific point in the project.</p>\n<h3>Create an annotated tag</h3>\n<p>To create an anotated tag, add <code>-a tagname -m "tag message"</code> to the <code>git tag</code> command:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git tag -a v4.0 -m "release version 4.0"\n$ git tag\nv1.0\nv2.0\nv3.0\nv4.0</code></pre>\n      </div>\n<p>As you can see, the <code>-a</code> specifies that you are creating an annotated tag, after comes the tag name and finally, the <code>-m</code> followed by the tag message to store in the Git database.</p>\n<h3>Create a lightweight tag</h3>\n<p>Lightweight tags contain only the commit checksum (no other information is stored). To create one, just run the <code>git tag</code> command without any other options (the -lw characters at the end of the name are used to indicate lightweight tags, but you can mark them as you like):</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git tag v4.1-lw\n$ git tag\nv1.0\nv2.0\nv3.0\nv4.0\nv4.1-lw</code></pre>\n      </div>\n<p>This time you didn’t specify a message or other relevant data, so the tag contains only the refered commit’s checksum.</p>\n<h2>View tag’s data</h2>\n<p>You can run the <code>git show</code> command to view the data stored in a tag. In the case of annotated tags, you’ll see the tag data and the commit data:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git show v4.0\ntag v4.0\nTagger: John Cash <john@cash.com>\nDate:   Mon Sat 28 15:00:25 2017 -0700\n\nrelease version 4.0\n\ncommit da43a5fss745av88d47839247990022a98419093\nAuthor: John Cash <john@cash.com>\nDate:   Fri Feb 20 20:30:05 2015 -0700\n\n  finished details</code></pre>\n      </div>\n<p>If the tag you are watching is a lightweight tag, you’ll only see the refered commit data:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git show v1.4-lw\ncommit da43a5f7389adcb9201ab0a289c389ed022a910b\nAuthor: John Cash <john@cash.com>\nDate:   Fri Feb 20 20:30:05 2015 -0700\n\n  finished details</code></pre>\n      </div>\n<h2>Tagging old commits</h2>\n<p>You can also tag past commits using the git tag commit. In order to do this, you’ll need to specify the commit’s checksum (or at least a part of it) in the command’s line.</p>\n<p>First, run git log to find out the required commit’s checksum:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git log --pretty=oneline\nac2998acf289102dba00823821bee04276aad9ca added products section\nd09034bdea0097726fd8383c0393faa0072829a7 refactorization\na029ac120245ab012bed1ca771349eb9cca01c0b modified styles\nda43a5f7389adcb9201ab0a289c389ed022a910b finished details\n0adb03ca013901c1e02174924486a08cea9293a2 small fix in search textarea styles</code></pre>\n      </div>\n<p>When you have the checksum needed, add it at the end of the tag creation line:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git tag -a v3.5 a029ac</code></pre>\n      </div>\n<p>You’ll see the tag was correctly added running <code>git tag</code>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git tag\nv1.0\nv2.0\nv3.0\nv3.5\nv4.0\nv4.1-lw</code></pre>\n      </div>\n<h2>Push tags</h2>\n<p>Git does’t push tags by default when you run the git push command. So, to succesfully push a tag to a server you’ll have to <code>git push origin</code> command:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git push origin v4.0\nCounting objects: 14, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (16/16), done.\nWriting objects: 100% (18/18), 3.15 KiB | 0 bytes/s, done.\nTotal 18 (delta 4), reused 0 (delta 0)\nTo git@github.com:jcash/gitmanual.git\n * [new tag]         v4.0 -> v4.0</code></pre>\n      </div>\n<p>You can also use the <code>--tags</code> option to add multiple tags at once with the <code>git push origin</code> command:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git push origin --tags\nCounting objects: 1, done.\nWriting objects: 100% (1/1), 160 bytes | 0 bytes/s, done.\nTotal 1 (delta 0), reused 0 (delta 0)\nTo git@github.com:jcash/gitmanual.git\n * [new tag]         v4.0 -> v4.0\n * [new tag]         v4.1-lw -> v4.1-lw</code></pre>\n      </div>\n<h2>Checking out Tags</h2>\n<p>You can use <code>git checkout</code> to checkout to a tag like you would normally do. But you need to keep in mind that this would result a <em>detached HEAD</em> state.</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git checkout v0.0.3\nNote: checking out \'v0.0.3\'.\n\nYou are in \'detached HEAD\' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.</code></pre>\n      </div>\n<h2>Deleting a Tag</h2>\n<p>You may find a situation were you want to delete a certain tag. There’s a very useful command for this situations:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>$ git tag --delete v0.0.2\n$ git tag\nv0.0.1\nv0.0.3\nv0.0.4</code></pre>\n      </div>\n<h3>More Information</h3>\n<ul>\n<li><a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">Git Pro - Tagging Basics</a></li>\n<li><a href="https://git-scm.com/docs/git-tag">Git Pro - Documentation</a></li>\n<li><a href="https://githowto.com/tagging_versions">Git HowTo</a></li>\n<li><a href="http://alblue.bandlem.com/2011/04/git-tip-of-week-tags.html">Git tip: Tags</a></li>\n<li><a href="https://www.drupal.org/node/1066342">Creating a tag</a></li>\n</ul>\n<h3>Sources</h3>\n<p>Git documentation: <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">tags</a></p>',fields:{slug:"/git/tagging-in-git/"},frontmatter:{title:"Tagging in Git"}}},pathContext:{slug:"/git/tagging-in-git/"}}}});
//# sourceMappingURL=path---git-tagging-in-git-1d0f9b9a2ba615602837.js.map