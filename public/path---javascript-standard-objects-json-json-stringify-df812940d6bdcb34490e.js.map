{"version":3,"sources":["webpack:///path---javascript-standard-objects-json-json-stringify-df812940d6bdcb34490e.js","webpack:///./.cache/json/javascript-standard-objects-json-json-stringify.json"],"names":["webpackJsonp","4696","module","exports","data","markdownRemark","html","fields","slug","frontmatter","title","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,KACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,ixwBAA69xBC,QAAyTC,KAAA,qDAA2DC,aAAgBC,MAAA,oBAA2BC,aAAgBH,KAAA","file":"path---javascript-standard-objects-json-json-stringify-df812940d6bdcb34490e.js","sourcesContent":["webpackJsonp([14733897546840],{\n\n/***/ 4696:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>JSON Stringify</h2>\\n<!-- The article goes here, in GitHub-flavored Markdown. Feel free to add YouTube videos, images, and CodePen/JSBin embeds  -->\\n<p>The <code>JSON.stringify()</code> method converts a <em>JSON-safe</em> JavaScript value to a JSON compliant string. </p>\\n<p>What are JSON-safe values one may ask! Let’s make a list of all JSON-unsafe values and anything that isn’t on the list can be considered JSON-safe.</p>\\n<h4>JSON-unsafe values:</h4>\\n<ul>\\n<li><code>undefined</code></li>\\n<li><code>function(){}</code></li>\\n<li>(ES6+) <code>Symbol</code></li>\\n<li>An object with circular reference(s) in it</li>\\n</ul>\\n<h4>Syntax</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> value <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> replacer <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> space<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>In its simplest and most used form: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> value <span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>Parameters</h4>\\n<p>  <code>value</code> : The JavaScript value to be ‘stringified’.</p>\\n<p>  <code>replacer</code> : (Optional) A function or an array which serves as a filter for properties of the value object to be included in the JSON string.</p>\\n<p>  <code>space</code> : (Optional) A numeric or string value to provide indentation to the JSON string. If a numeric value is provided, that many spaces (upto 10) act as indentaion at each level. If a string value is provided, that string (upto first 10 chracters) acts as indentation at each level.</p>\\n<h4>Return type</h4>\\n<p>The return type of the method is: <code>string</code>.</p>\\n<h2>Description</h2>\\n<p>The JSON-safe values are converted to their corresponding JSON string form. The JSON-unsafe values on the other hand return :</p>\\n<ul>\\n<li><code>undefined</code> if they are passed as values to the method </li>\\n<li><code>null</code> if they are passed as an array element</li>\\n<li>nothing if passed as properties on an object</li>\\n<li>throws an error if its an object with circular references(s) on it.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-safe values</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>                  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{}'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 'true'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>               <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '\\\"foo\\\"'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'false'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '[1,\\\"false\\\",false]'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>            <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"x\\\":5}'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2006</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '\\\"2006-01-02T15:04:05.000Z\\\"'</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as values to the method</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> undefined <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\t\\t\\t\\t\\t<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// undefined</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\t\\t\\t\\t\\t<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// undefined</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as array elements</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> undefined<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"x\\\":[10,null,null,null]}' </span>\\n \\n <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as properties on a object</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{}'</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe object with circular reference on it</span>\\n  <span class=\\\"token keyword\\\">var</span> o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n      c<span class=\\\"token punctuation\\\">:</span> o<span class=\\\"token punctuation\\\">,</span>\\n      d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// create a circular reference inside `a`</span>\\n  o<span class=\\\"token punctuation\\\">.</span>e <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// would throw an error on the circular reference</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// JSON.stringify( a );</span>\\n</code></pre>\\n      </div>\\n<p><code>JSON.stringify(...)</code> behaves differently if an object passed to it has a <code>toJSON()</code> method defined on it. The return value from the <code>toJSON()</code> method will be serialized instead of the object itself.</p>\\n<p>This comes in exceptionally handy when an object contains any illegal JSON value. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as properties on a object</span>\\n   <span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n   \\n   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON.stringify(obj);  logs '{}'</span>\\n   obj<span class=\\\"token punctuation\\\">.</span>toJSON <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n      x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"undefined\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Function\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      z<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"Symbol\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n   JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//\\\"{\\\"x\\\":\\\"undefined\\\",\\\"y\\\":\\\"Function\\\",\\\"z\\\":\\\"Symbol\\\"}\\\"</span>\\n    \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe object with circular reference on it</span>\\n  <span class=\\\"token keyword\\\">var</span> o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n      c<span class=\\\"token punctuation\\\">:</span> o<span class=\\\"token punctuation\\\">,</span>\\n      d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// create a circular reference inside `a`</span>\\n  o<span class=\\\"token punctuation\\\">.</span>e <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// would throw an error on the circular reference</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// JSON.stringify( a );</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// define a custom JSON value serialization</span>\\n  a<span class=\\\"token punctuation\\\">.</span>toJSON <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// only include the `b` property for serialization</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>b <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> a <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"{\\\"b\\\":42}\\\"</span>\\n</code></pre>\\n      </div>\\n<h4>The <code>replacer</code></h4>\\n<p>The <code>replacer</code>, as mentioned earlier, is a filter which indicates which properties are to be included in the JSON string. It can either be an array or a function.\\nWhen an array, the replacer contains the string representations of only those properties which are to be included in the JSON string.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>foundation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Mozilla'</span><span class=\\\"token punctuation\\\">,</span> model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'box'</span><span class=\\\"token punctuation\\\">,</span> week<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">,</span> transport<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'car'</span><span class=\\\"token punctuation\\\">,</span> month<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'week'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'month'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"week\\\":45,\\\"month\\\":7}', only keep \\\"week\\\" and \\\"month\\\" properties</span>\\n</code></pre>\\n      </div>\\n<p>If <code>replacer</code> is a function, it will be called once for the object itself, and then once for each property in the object, and each time is passed two arguments, <em>key</em> and <em>value</em>. To skip a <em>key</em> in the serialization, <code>undefined</code> should be returned. Otherwise, the <em>value</em> provided should be returned. If any of these <em>values</em> are objects themselves, the <code>replacer</code> function serializes them recursively as well.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">replacer</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Filtering out properties</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>foundation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Mozilla'</span><span class=\\\"token punctuation\\\">,</span> model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'box'</span><span class=\\\"token punctuation\\\">,</span> week<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">,</span> transport<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'car'</span><span class=\\\"token punctuation\\\">,</span> month<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> replacer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"week\\\":45,\\\"month\\\":7}'</span>\\n</code></pre>\\n      </div>\\n<p>If an array is passed to <code>JSON.stringify()</code> and <code>replacer</code> returns <code>undefined</code> for any of its elements, the element’s value is replaced with <code>null</code>. <code>replacer</code> functions cannot remove values from an array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">replacer</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Filtering out properties</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'Mozilla'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'box'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'car'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> replacer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"[null,null,45,null,7]\\\"</span>\\n</code></pre>\\n      </div>\\n<h4>The <code>space</code></h4>\\n<p>The <code>space</code> parameter used for indentation makes the result of <code>JSON.stringify()</code> prettier.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n    c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"42\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    \\\"b\\\": 42,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    \\\"c\\\": \\\"42\\\",</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    \\\"d\\\": [</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//       1,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//       2,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//       3</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    ]</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }\\\"</span>\\n\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"-----\\\"</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----\\\"b\\\": 42,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----\\\"c\\\": \\\"42\\\",</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----\\\"d\\\": [</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ----------1,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ----------2,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ----------3</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----]</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }\\\"</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<!-- Please add any articles you think might be helpful to read before writing the article -->\\n<p>Refer to <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\\\">MDN docs</a>.</p>\",\"fields\":{\"slug\":\"/javascript/standard-objects/json/json-stringify/\"},\"frontmatter\":{\"title\":\"JSON Stringify\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/json/json-stringify/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---javascript-standard-objects-json-json-stringify-df812940d6bdcb34490e.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>JSON Stringify</h2>\\n<!-- The article goes here, in GitHub-flavored Markdown. Feel free to add YouTube videos, images, and CodePen/JSBin embeds  -->\\n<p>The <code>JSON.stringify()</code> method converts a <em>JSON-safe</em> JavaScript value to a JSON compliant string. </p>\\n<p>What are JSON-safe values one may ask! Let’s make a list of all JSON-unsafe values and anything that isn’t on the list can be considered JSON-safe.</p>\\n<h4>JSON-unsafe values:</h4>\\n<ul>\\n<li><code>undefined</code></li>\\n<li><code>function(){}</code></li>\\n<li>(ES6+) <code>Symbol</code></li>\\n<li>An object with circular reference(s) in it</li>\\n</ul>\\n<h4>Syntax</h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> value <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> replacer <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">,</span> space<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>In its simplest and most used form: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> value <span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h4>Parameters</h4>\\n<p>  <code>value</code> : The JavaScript value to be ‘stringified’.</p>\\n<p>  <code>replacer</code> : (Optional) A function or an array which serves as a filter for properties of the value object to be included in the JSON string.</p>\\n<p>  <code>space</code> : (Optional) A numeric or string value to provide indentation to the JSON string. If a numeric value is provided, that many spaces (upto 10) act as indentaion at each level. If a string value is provided, that string (upto first 10 chracters) acts as indentation at each level.</p>\\n<h4>Return type</h4>\\n<p>The return type of the method is: <code>string</code>.</p>\\n<h2>Description</h2>\\n<p>The JSON-safe values are converted to their corresponding JSON string form. The JSON-unsafe values on the other hand return :</p>\\n<ul>\\n<li><code>undefined</code> if they are passed as values to the method </li>\\n<li><code>null</code> if they are passed as an array element</li>\\n<li>nothing if passed as properties on an object</li>\\n<li>throws an error if its an object with circular references(s) on it.</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-safe values</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>                  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{}'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>                <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// 'true'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>               <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '\\\"foo\\\"'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'false'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '[1,\\\"false\\\",false]'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">5</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>            <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"x\\\":5}'</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2006</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '\\\"2006-01-02T15:04:05.000Z\\\"'</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as values to the method</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> undefined <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\t\\t\\t\\t\\t<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// undefined</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\t\\t\\t\\t\\t<span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// undefined</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as array elements</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> undefined<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"x\\\":[10,null,null,null]}' </span>\\n \\n <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as properties on a object</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{}'</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe object with circular reference on it</span>\\n  <span class=\\\"token keyword\\\">var</span> o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n      c<span class=\\\"token punctuation\\\">:</span> o<span class=\\\"token punctuation\\\">,</span>\\n      d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// create a circular reference inside `a`</span>\\n  o<span class=\\\"token punctuation\\\">.</span>e <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// would throw an error on the circular reference</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// JSON.stringify( a );</span>\\n</code></pre>\\n      </div>\\n<p><code>JSON.stringify(...)</code> behaves differently if an object passed to it has a <code>toJSON()</code> method defined on it. The return value from the <code>toJSON()</code> method will be serialized instead of the object itself.</p>\\n<p>This comes in exceptionally handy when an object contains any illegal JSON value. </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe values passed as properties on a object</span>\\n   <span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> x<span class=\\\"token punctuation\\\">:</span> undefined<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">:</span> Object<span class=\\\"token punctuation\\\">,</span> z<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n   \\n   <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON.stringify(obj);  logs '{}'</span>\\n   obj<span class=\\\"token punctuation\\\">.</span>toJSON <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n      x<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"undefined\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      y<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"Function\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      z<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">\\\"Symbol\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n   <span class=\\\"token punctuation\\\">}</span>\\n   JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//\\\"{\\\"x\\\":\\\"undefined\\\",\\\"y\\\":\\\"Function\\\",\\\"z\\\":\\\"Symbol\\\"}\\\"</span>\\n    \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//JSON-unsafe object with circular reference on it</span>\\n  <span class=\\\"token keyword\\\">var</span> o <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n      c<span class=\\\"token punctuation\\\">:</span> o<span class=\\\"token punctuation\\\">,</span>\\n      d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// create a circular reference inside `a`</span>\\n  o<span class=\\\"token punctuation\\\">.</span>e <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// would throw an error on the circular reference</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// JSON.stringify( a );</span>\\n  \\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// define a custom JSON value serialization</span>\\n  a<span class=\\\"token punctuation\\\">.</span>toJSON <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// only include the `b` property for serialization</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>b <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> a <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"{\\\"b\\\":42}\\\"</span>\\n</code></pre>\\n      </div>\\n<h4>The <code>replacer</code></h4>\\n<p>The <code>replacer</code>, as mentioned earlier, is a filter which indicates which properties are to be included in the JSON string. It can either be an array or a function.\\nWhen an array, the replacer contains the string representations of only those properties which are to be included in the JSON string.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>foundation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Mozilla'</span><span class=\\\"token punctuation\\\">,</span> model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'box'</span><span class=\\\"token punctuation\\\">,</span> week<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">,</span> transport<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'car'</span><span class=\\\"token punctuation\\\">,</span> month<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'week'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'month'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"week\\\":45,\\\"month\\\":7}', only keep \\\"week\\\" and \\\"month\\\" properties</span>\\n</code></pre>\\n      </div>\\n<p>If <code>replacer</code> is a function, it will be called once for the object itself, and then once for each property in the object, and each time is passed two arguments, <em>key</em> and <em>value</em>. To skip a <em>key</em> in the serialization, <code>undefined</code> should be returned. Otherwise, the <em>value</em> provided should be returned. If any of these <em>values</em> are objects themselves, the <code>replacer</code> function serializes them recursively as well.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">replacer</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Filtering out properties</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>foundation<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Mozilla'</span><span class=\\\"token punctuation\\\">,</span> model<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'box'</span><span class=\\\"token punctuation\\\">,</span> week<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">,</span> transport<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'car'</span><span class=\\\"token punctuation\\\">,</span> month<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> replacer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// '{\\\"week\\\":45,\\\"month\\\":7}'</span>\\n</code></pre>\\n      </div>\\n<p>If an array is passed to <code>JSON.stringify()</code> and <code>replacer</code> returns <code>undefined</code> for any of its elements, the element’s value is replaced with <code>null</code>. <code>replacer</code> functions cannot remove values from an array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">replacer</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> value<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// Filtering out properties</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> value <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'string'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> undefined<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span> value<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">var</span> foo <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'Mozilla'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'box'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">45</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'car'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">7</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>foo<span class=\\\"token punctuation\\\">,</span> replacer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"[null,null,45,null,7]\\\"</span>\\n</code></pre>\\n      </div>\\n<h4>The <code>space</code></h4>\\n<p>The <code>space</code> parameter used for indentation makes the result of <code>JSON.stringify()</code> prettier.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">42</span><span class=\\\"token punctuation\\\">,</span>\\n    c<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"42\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    d<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    \\\"b\\\": 42,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    \\\"c\\\": \\\"42\\\",</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    \\\"d\\\": [</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//       1,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//       2,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//       3</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">//    ]</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }\\\"</span>\\n\\n  JSON<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"-----\\\"</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// \\\"{</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----\\\"b\\\": 42,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----\\\"c\\\": \\\"42\\\",</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----\\\"d\\\": [</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ----------1,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ----------2,</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// ----------3</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// -----]</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\">// }\\\"</span>\\n</code></pre>\\n      </div>\\n<h4>More Information:</h4>\\n<!-- Please add any articles you think might be helpful to read before writing the article -->\\n<p>Refer to <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\\\">MDN docs</a>.</p>\",\"fields\":{\"slug\":\"/javascript/standard-objects/json/json-stringify/\"},\"frontmatter\":{\"title\":\"JSON Stringify\"}}},\"pathContext\":{\"slug\":\"/javascript/standard-objects/json/json-stringify/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/javascript-standard-objects-json-json-stringify.json\n// module id = 4696\n// module chunks = 14733897546840"],"sourceRoot":""}